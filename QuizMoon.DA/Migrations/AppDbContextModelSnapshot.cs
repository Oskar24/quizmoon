// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizMoon.DA;

#nullable disable

namespace QuizMoon.DA.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizMoon.Models.Flashcard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FlashCards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Answer = "class",
                            Question = "What keyword is used to define a new class in C#?"
                        },
                        new
                        {
                            Id = 2,
                            Answer = "int x = 10;",
                            Question = "How do you initialize an integer variable in C#?"
                        },
                        new
                        {
                            Id = 3,
                            Answer = "It is a mechanism that allows a class to inherit properties and behavior from another class.",
                            Question = "What does the term 'inheritance' mean in C#?"
                        },
                        new
                        {
                            Id = 4,
                            Answer = "ClassName myObject = new ClassName();",
                            Question = "How do you create a new instance of a class in C#?"
                        },
                        new
                        {
                            Id = 5,
                            Answer = "To display data on the console.",
                            Question = "What is the purpose of the Console.WriteLine method in C#?"
                        },
                        new
                        {
                            Id = 6,
                            Answer = "Using a try-catch block.",
                            Question = "How do you handle exceptions in C#?"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
