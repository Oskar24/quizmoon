// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizMoon.DA;

#nullable disable

namespace QuizMoon.DA.Migrations
{
    [DbContext(typeof(AppContext))]
    [Migration("20240127195712_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizMoon.Models.Entities.Flashcard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Flashcards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Answer = "class",
                            Question = "What keyword is used to define a new class in C#?"
                        },
                        new
                        {
                            Id = 2,
                            Answer = "int x = 10;",
                            Question = "How do you initialize an integer variable in C#?"
                        },
                        new
                        {
                            Id = 3,
                            Answer = "It is a mechanism that allows a class to inherit properties and behavior from another class.",
                            Question = "What does the term 'inheritance' mean in C#?"
                        },
                        new
                        {
                            Id = 4,
                            Answer = "ClassName myObject = new ClassName();",
                            Question = "How do you create a new instance of a class in C#?"
                        },
                        new
                        {
                            Id = 5,
                            Answer = "To display data on the console.",
                            Question = "What is the purpose of the Console.WriteLine method in C#?"
                        },
                        new
                        {
                            Id = 6,
                            Answer = "Using a try-catch block.",
                            Question = "How do you handle exceptions in C#?"
                        },
                        new
                        {
                            Id = 7,
                            Answer = "'==' is used for checking reference equality, while 'Equals' is used for checking object equality based on overridden implementation.",
                            Question = "What is the difference between '==' and 'Equals' method in C#?"
                        },
                        new
                        {
                            Id = 8,
                            Answer = "A concise way to represent anonymous methods using the '=>' syntax.",
                            Question = "What is a lambda expression in C#?"
                        },
                        new
                        {
                            Id = 9,
                            Answer = "It is used to define a scope at the end of which an object will be disposed of, helping in resource management.",
                            Question = "Explain the 'using' statement in C#."
                        },
                        new
                        {
                            Id = 10,
                            Answer = "'var' is used for implicitly declaring a local variable, letting the compiler infer its type.",
                            Question = "What is the purpose of the 'var' keyword in C#?"
                        },
                        new
                        {
                            Id = 11,
                            Answer = "A class implements an interface by providing concrete implementations for all the methods declared in the interface.",
                            Question = "How do you implement an interface in C#?"
                        },
                        new
                        {
                            Id = 12,
                            Answer = "'StringBuilder' is mutable and can be modified, while 'String' is immutable and cannot be changed after creation.",
                            Question = "What is the difference between 'StringBuilder' and 'String' in C#?"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
